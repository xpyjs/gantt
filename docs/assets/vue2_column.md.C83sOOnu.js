import{_ as p}from"./chunks/column-basic.D9z6S-Hy.js";import{_ as d,o,c as r,I as a,j as s,a as i,am as e,D as n}from"./chunks/framework.D45d_ddI.js";const J=JSON.parse('{"title":"列组件 XGanttColumn","description":"","frontmatter":{},"headers":[],"relativePath":"vue2/column.md","filePath":"vue2/column.md","lastUpdated":1723813837000}'),k={name:"vue2/column.md"},c=s("h1",{id:"列组件-xganttcolumn",tabindex:"-1"},[i("列组件 XGanttColumn "),s("a",{class:"header-anchor",href:"#列组件-xganttcolumn","aria-label":'Permalink to "列组件 XGanttColumn"'},"​")],-1),E=e(`<p>因为我们在内部已经将其加载，所以您并不需要显示的再次导入到您的组件中就可以使用。</p><p>列组件会显示在甘特表的左侧，如果没有提供，则不显示任何列。</p><h2 id="基础使用" tabindex="-1">基础使用 <a class="header-anchor" href="#基础使用" aria-label="Permalink to &quot;基础使用&quot;">​</a></h2><p>您只需要简单的将其插入到根组件内即可。</p><p>基于入门的示例，您可以直接这样使用：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">x-gantt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    data-index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    :data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dataList&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">x-gantt-column</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">x-gantt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>它将显示成如下内容：</p><p><img src="`+p+'" alt=""></p><h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h2><h3 id="center" tabindex="-1">center <a class="header-anchor" href="#center" aria-label="Permalink to &quot;center&quot;">​</a></h3>',10),g=s("p",null,"可以控制当前列的内容居中，默认居左。",-1),_=s("h3",{id:"column-class",tabindex:"-1"},[i("column-class "),s("a",{class:"header-anchor",href:"#column-class","aria-label":'Permalink to "column-class"'},"​")],-1),m=s("p",null,"允许向列块内注入类名，与原生使用方法一样。",-1),u=s("h3",{id:"column-style",tabindex:"-1"},[i("column-style "),s("a",{class:"header-anchor",href:"#column-style","aria-label":'Permalink to "column-style"'},"​")],-1),y=s("p",null,"允许向列块内注入样式，与原生使用方法一样。",-1),b=s("h3",{id:"date-format",tabindex:"-1"},[i("date-format "),s("a",{class:"header-anchor",href:"#date-format","aria-label":'Permalink to "date-format"'},"​")],-1),F=e('<p>自定义显示日期的格式。如果列内需要显示日期，可以通过该属性来格式化日期。</p><div class="warning custom-block"><p class="custom-block-title">请注意</p><p>值得注意的是，如果给出该字段，那么其数据内容一定会被当成日期来解析并且格式化，所以不要在非日期字段添加该属性。</p></div><p>更多关于日期格式化的属性，参看 <a href="./common.html#日期格式化属性">日期格式化属性</a></p><h3 id="empty-data" tabindex="-1">empty-data <a class="header-anchor" href="#empty-data" aria-label="Permalink to &quot;empty-data&quot;">​</a></h3>',4),f=s("p",null,"设置空数据时显示的内容。如果数据内容为空，则会显示空数据内容。",-1),C={id:"label",tabindex:"-1"},x=s("a",{class:"header-anchor",href:"#label","aria-label":'Permalink to "label\\* <Badge text="required" type="danger"/>"'},"​",-1),v=e(`<p><code>label</code> 是一个必填属性，它应当对应您给出数据的某一个键名。</p><p>它将加载该字段数据的内容显示在列内容中，同时表头的名称默认也会显示为该 <code>label</code> 名称。当然，您可以通过设置 <a href="#name"><code>name</code></a> 来自定义。</p><div class="tip custom-block"><p class="custom-block-title">更新</p><p>从 <code>v1.1.7</code> 开始，它支持通过 <code>.</code> 深度读取对象内部属性。</p><p>比如原始对象为：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    b: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      c: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>那么，<code>label</code> 可以通过 <code>a.b.c</code> 直接读取到值，而不用像之前那样需要通过模板导出数据再读取内部属性。</p></div><h3 id="merge" tabindex="-1">merge <a class="header-anchor" href="#merge" aria-label="Permalink to &quot;merge&quot;">​</a></h3>`,4),A=e(`<p>设置当前列是否需要与前一列合并。您可以给出一个 Boolean 值或者一个返回 Boolean 值的函数。</p><ul><li>函数允许您使用行内数据。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mergeFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // your code</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 请确保返回一个 Boolean 值。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这是一个很灵活的属性，如果设置为 <code>true</code>，则会与前一列进行合并，同时不显示当前列的内容。</p><p><strong>请注意</strong>，该字段对首列无效。</p><h3 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-label="Permalink to &quot;name&quot;">​</a></h3>`,6),T=s("p",null,[i("设置该列表头的显示文本，如果没有，则会显示 "),s("code",null,"label"),i(" 的内容。它的优先级比 "),s("code",null,"label"),i(" 高。")],-1),P=s("h3",{id:"selectable",tabindex:"-1"},[i("selectable "),s("a",{class:"header-anchor",href:"#selectable","aria-label":'Permalink to "selectable"'},"​")],-1),D=s("p",null,"设置当前列内容的文本是否可以选择，默认禁止选择。",-1),B=s("h3",{id:"width",tabindex:"-1"},[i("width "),s("a",{class:"header-anchor",href:"#width","aria-label":'Permalink to "width"'},"​")],-1),q=s("p",null,"设置该列的列宽。默认宽度 80，请保持宽度大于 30，否则会引起渲染异常。",-1),S=s("h2",{id:"插槽",tabindex:"-1"},[i("插槽 "),s("a",{class:"header-anchor",href:"#插槽","aria-label":'Permalink to "插槽"'},"​")],-1),V=s("h3",{id:"default",tabindex:"-1"},[i("default "),s("a",{class:"header-anchor",href:"#default","aria-label":'Permalink to "default"'},"​")],-1),j=e(`<p>列组件内部允许您插入任何内容，同时它会抛出当前行的数据以供您使用。</p><p>一个简单的示例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">x-gantt-column</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ data }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">x-gantt-column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>接下来，您将继续学习滑块组件的内容。</p>`,4);function I(N,w,R,$,G,O){const l=n("Description"),t=n("DataParameter"),h=n("Badge");return o(),r("div",null,[c,a(l,{author:"jeremyjone",date:"2022-06-22",copyright:"jeremyjone"}),E,a(t,{t:"Boolean",d:"false"}),g,_,a(t,{t:"Object | String",d:"{}"}),m,u,a(t,{t:"Object | String",d:"{}"}),y,b,a(t,{t:"String",d:"yyyy-MM-dd"}),F,a(t,{t:"String",d:"无数据 😢"}),f,s("h3",C,[i("label* "),a(h,{text:"required",type:"danger"}),i(),x]),a(t,{r:"",t:"String"}),v,a(t,{t:"(data) => boolean | Boolean",d:"false"}),A,a(t,{t:"String"}),T,P,a(t,{t:"Boolean",d:"false"}),D,B,a(t,{t:"Number | String",d:"80"}),q,S,V,a(t,{f:"scope = data:any"}),j])}const L=d(k,[["render",I]]);export{J as __pageData,L as default};
